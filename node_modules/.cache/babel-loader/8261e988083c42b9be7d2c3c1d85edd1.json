{"ast":null,"code":"/*! magnet-uri. MIT License. WebTorrent LLC <https://webtorrent.io/opensource> */\nmodule.exports = magnetURIDecode;\nmodule.exports.decode = magnetURIDecode;\nmodule.exports.encode = magnetURIEncode;\n\nvar base32 = require('thirty-two');\n\nvar bep53Range = require('bep53-range');\n/**\n * Parse a magnet URI and return an object of keys/values\n *\n * @param  {string} uri\n * @return {Object} parsed uri\n */\n\n\nfunction magnetURIDecode(uri) {\n  var result = {}; // Support 'magnet:' and 'stream-magnet:' uris\n\n  var data = uri.split('magnet:?')[1];\n  var params = data && data.length >= 0 ? data.split('&') : [];\n  params.forEach(function (param) {\n    var keyval = param.split('='); // This keyval is invalid, skip it\n\n    if (keyval.length !== 2) return;\n    var key = keyval[0];\n    var val = keyval[1]; // Clean up torrent name\n\n    if (key === 'dn') val = decodeURIComponent(val).replace(/\\+/g, ' '); // Address tracker (tr), exact source (xs), and acceptable source (as) are encoded\n    // URIs, so decode them\n\n    if (key === 'tr' || key === 'xs' || key === 'as' || key === 'ws') {\n      val = decodeURIComponent(val);\n    } // Return keywords as an array\n\n\n    if (key === 'kt') val = decodeURIComponent(val).split('+'); // Cast file index (ix) to a number\n\n    if (key === 'ix') val = Number(val); // bep53\n\n    if (key === 'so') val = bep53Range.parse(decodeURIComponent(val).split(',')); // If there are repeated parameters, return an array of values\n\n    if (result[key]) {\n      if (!Array.isArray(result[key])) {\n        result[key] = [result[key]];\n      }\n\n      result[key].push(val);\n    } else {\n      result[key] = val;\n    }\n  }); // Convenience properties for parity with `parse-torrent-file` module\n\n  var m;\n\n  if (result.xt) {\n    var xts = Array.isArray(result.xt) ? result.xt : [result.xt];\n    xts.forEach(function (xt) {\n      if (m = xt.match(/^urn:btih:(.{40})/)) {\n        result.infoHash = m[1].toLowerCase();\n      } else if (m = xt.match(/^urn:btih:(.{32})/)) {\n        var decodedStr = base32.decode(m[1]);\n        result.infoHash = Buffer.from(decodedStr, 'binary').toString('hex');\n      } else if (m = xt.match(/^urn:btmh:1220(.{64})/)) {\n        result.infoHashV2 = m[1].toLowerCase();\n      }\n    });\n  }\n\n  if (result.xs) {\n    var xss = Array.isArray(result.xs) ? result.xs : [result.xs];\n    xss.forEach(function (xs) {\n      if (m = xs.match(/^urn:btpk:(.{64})/)) {\n        result.publicKey = m[1].toLowerCase();\n      }\n    });\n  }\n\n  if (result.infoHash) result.infoHashBuffer = Buffer.from(result.infoHash, 'hex');\n  if (result.infoHashV2) result.infoHashV2Buffer = Buffer.from(result.infoHashV2, 'hex');\n  if (result.publicKey) result.publicKeyBuffer = Buffer.from(result.publicKey, 'hex');\n  if (result.dn) result.name = result.dn;\n  if (result.kt) result.keywords = result.kt;\n  result.announce = [];\n\n  if (typeof result.tr === 'string' || Array.isArray(result.tr)) {\n    result.announce = result.announce.concat(result.tr);\n  }\n\n  result.urlList = [];\n\n  if (typeof result.as === 'string' || Array.isArray(result.as)) {\n    result.urlList = result.urlList.concat(result.as);\n  }\n\n  if (typeof result.ws === 'string' || Array.isArray(result.ws)) {\n    result.urlList = result.urlList.concat(result.ws);\n  }\n\n  result.peerAddresses = [];\n\n  if (typeof result['x.pe'] === 'string' || Array.isArray(result['x.pe'])) {\n    result.peerAddresses = result.peerAddresses.concat(result['x.pe']);\n  } // remove duplicates by converting to Set and back\n\n\n  result.announce = Array.from(new Set(result.announce));\n  result.urlList = Array.from(new Set(result.urlList));\n  result.peerAddresses = Array.from(new Set(result.peerAddresses));\n  return result;\n}\n\nfunction magnetURIEncode(obj) {\n  obj = Object.assign({}, obj); // clone obj, so we can mutate it\n  // support using convenience names, in addition to spec names\n  // (example: `infoHash` for `xt`, `name` for `dn`)\n  // Deduplicate xt by using a set\n\n  var xts = new Set();\n  if (obj.xt && typeof obj.xt === 'string') xts.add(obj.xt);\n  if (obj.xt && Array.isArray(obj.xt)) xts = new Set(obj.xt);\n  if (obj.infoHashBuffer) xts.add(\"urn:btih:\".concat(obj.infoHashBuffer.toString('hex')));\n  if (obj.infoHash) xts.add(\"urn:btih:\".concat(obj.infoHash));\n  if (obj.infoHashV2Buffer) xts.add(obj.xt = \"urn:btmh:1220\".concat(obj.infoHashV2Buffer.toString('hex')));\n  if (obj.infoHashV2) xts.add(\"urn:btmh:1220\".concat(obj.infoHashV2));\n  var xtsDeduped = Array.from(xts);\n  if (xtsDeduped.length === 1) obj.xt = xtsDeduped[0];\n  if (xtsDeduped.length > 1) obj.xt = xtsDeduped;\n  if (obj.publicKeyBuffer) obj.xs = \"urn:btpk:\".concat(obj.publicKeyBuffer.toString('hex'));\n  if (obj.publicKey) obj.xs = \"urn:btpk:\".concat(obj.publicKey);\n  if (obj.name) obj.dn = obj.name;\n  if (obj.keywords) obj.kt = obj.keywords;\n  if (obj.announce) obj.tr = obj.announce;\n\n  if (obj.urlList) {\n    obj.ws = obj.urlList;\n    delete obj.as;\n  }\n\n  if (obj.peerAddresses) obj['x.pe'] = obj.peerAddresses;\n  var result = 'magnet:?';\n  Object.keys(obj).filter(function (key) {\n    return key.length === 2 || key === 'x.pe';\n  }).forEach(function (key, i) {\n    var values = Array.isArray(obj[key]) ? obj[key] : [obj[key]];\n    values.forEach(function (val, j) {\n      if ((i > 0 || j > 0) && (key !== 'kt' && key !== 'so' || j === 0)) result += '&';\n      if (key === 'dn') val = encodeURIComponent(val).replace(/%20/g, '+');\n\n      if (key === 'tr' || key === 'as' || key === 'ws') {\n        val = encodeURIComponent(val);\n      } // Don't URI encode BEP46 keys\n\n\n      if (key === 'xs' && !val.startsWith('urn:btpk:')) {\n        val = encodeURIComponent(val);\n      }\n\n      if (key === 'kt') val = encodeURIComponent(val);\n      if (key === 'so') return;\n      if (key === 'kt' && j > 0) result += \"+\".concat(val);else result += \"\".concat(key, \"=\").concat(val);\n    });\n    if (key === 'so') result += \"\".concat(key, \"=\").concat(bep53Range.compose(values));\n  });\n  return result;\n}","map":{"version":3,"sources":["/home/runner/work/watchparty/watchparty/node_modules/magnet-uri/index.js"],"names":["module","exports","magnetURIDecode","decode","encode","magnetURIEncode","base32","require","bep53Range","uri","result","data","split","params","length","forEach","param","keyval","key","val","decodeURIComponent","replace","Number","parse","Array","isArray","push","m","xt","xts","match","infoHash","toLowerCase","decodedStr","Buffer","from","toString","infoHashV2","xs","xss","publicKey","infoHashBuffer","infoHashV2Buffer","publicKeyBuffer","dn","name","kt","keywords","announce","tr","concat","urlList","as","ws","peerAddresses","Set","obj","Object","assign","add","xtsDeduped","keys","filter","i","values","j","encodeURIComponent","startsWith","compose"],"mappings":"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","sourcesContent":["/*! magnet-uri. MIT License. WebTorrent LLC <https://webtorrent.io/opensource> */\nmodule.exports = magnetURIDecode\nmodule.exports.decode = magnetURIDecode\nmodule.exports.encode = magnetURIEncode\n\nconst base32 = require('thirty-two')\nconst bep53Range = require('bep53-range')\n\n/**\n * Parse a magnet URI and return an object of keys/values\n *\n * @param  {string} uri\n * @return {Object} parsed uri\n */\nfunction magnetURIDecode (uri) {\n  const result = {}\n\n  // Support 'magnet:' and 'stream-magnet:' uris\n  const data = uri.split('magnet:?')[1]\n\n  const params = (data && data.length >= 0)\n    ? data.split('&')\n    : []\n\n  params.forEach(param => {\n    const keyval = param.split('=')\n\n    // This keyval is invalid, skip it\n    if (keyval.length !== 2) return\n\n    const key = keyval[0]\n    let val = keyval[1]\n\n    // Clean up torrent name\n    if (key === 'dn') val = decodeURIComponent(val).replace(/\\+/g, ' ')\n\n    // Address tracker (tr), exact source (xs), and acceptable source (as) are encoded\n    // URIs, so decode them\n    if (key === 'tr' || key === 'xs' || key === 'as' || key === 'ws') {\n      val = decodeURIComponent(val)\n    }\n\n    // Return keywords as an array\n    if (key === 'kt') val = decodeURIComponent(val).split('+')\n\n    // Cast file index (ix) to a number\n    if (key === 'ix') val = Number(val)\n\n    // bep53\n    if (key === 'so') val = bep53Range.parse(decodeURIComponent(val).split(','))\n\n    // If there are repeated parameters, return an array of values\n    if (result[key]) {\n      if (!Array.isArray(result[key])) {\n        result[key] = [result[key]]\n      }\n\n      result[key].push(val)\n    } else {\n      result[key] = val\n    }\n  })\n\n  // Convenience properties for parity with `parse-torrent-file` module\n  let m\n  if (result.xt) {\n    const xts = Array.isArray(result.xt) ? result.xt : [result.xt]\n    xts.forEach(xt => {\n      if ((m = xt.match(/^urn:btih:(.{40})/))) {\n        result.infoHash = m[1].toLowerCase()\n      } else if ((m = xt.match(/^urn:btih:(.{32})/))) {\n        const decodedStr = base32.decode(m[1])\n        result.infoHash = Buffer.from(decodedStr, 'binary').toString('hex')\n      } else if ((m = xt.match(/^urn:btmh:1220(.{64})/))) {\n        result.infoHashV2 = m[1].toLowerCase()\n      }\n    })\n  }\n\n  if (result.xs) {\n    const xss = Array.isArray(result.xs) ? result.xs : [result.xs]\n    xss.forEach(xs => {\n      if ((m = xs.match(/^urn:btpk:(.{64})/))) {\n        result.publicKey = m[1].toLowerCase()\n      }\n    })\n  }\n\n  if (result.infoHash) result.infoHashBuffer = Buffer.from(result.infoHash, 'hex')\n  if (result.infoHashV2) result.infoHashV2Buffer = Buffer.from(result.infoHashV2, 'hex')\n  if (result.publicKey) result.publicKeyBuffer = Buffer.from(result.publicKey, 'hex')\n\n  if (result.dn) result.name = result.dn\n  if (result.kt) result.keywords = result.kt\n\n  result.announce = []\n  if (typeof result.tr === 'string' || Array.isArray(result.tr)) {\n    result.announce = result.announce.concat(result.tr)\n  }\n\n  result.urlList = []\n  if (typeof result.as === 'string' || Array.isArray(result.as)) {\n    result.urlList = result.urlList.concat(result.as)\n  }\n  if (typeof result.ws === 'string' || Array.isArray(result.ws)) {\n    result.urlList = result.urlList.concat(result.ws)\n  }\n\n  result.peerAddresses = []\n  if (typeof result['x.pe'] === 'string' || Array.isArray(result['x.pe'])) {\n    result.peerAddresses = result.peerAddresses.concat(result['x.pe'])\n  }\n\n  // remove duplicates by converting to Set and back\n  result.announce = Array.from(new Set(result.announce))\n  result.urlList = Array.from(new Set(result.urlList))\n  result.peerAddresses = Array.from(new Set(result.peerAddresses))\n\n  return result\n}\n\nfunction magnetURIEncode (obj) {\n  obj = Object.assign({}, obj) // clone obj, so we can mutate it\n\n  // support using convenience names, in addition to spec names\n  // (example: `infoHash` for `xt`, `name` for `dn`)\n\n  // Deduplicate xt by using a set\n  let xts = new Set()\n  if (obj.xt && typeof obj.xt === 'string') xts.add(obj.xt)\n  if (obj.xt && Array.isArray(obj.xt)) xts = new Set(obj.xt)\n  if (obj.infoHashBuffer) xts.add(`urn:btih:${obj.infoHashBuffer.toString('hex')}`)\n  if (obj.infoHash) xts.add(`urn:btih:${obj.infoHash}`)\n  if (obj.infoHashV2Buffer) xts.add(obj.xt = `urn:btmh:1220${obj.infoHashV2Buffer.toString('hex')}`)\n  if (obj.infoHashV2) xts.add(`urn:btmh:1220${obj.infoHashV2}`)\n  const xtsDeduped = Array.from(xts)\n  if (xtsDeduped.length === 1) obj.xt = xtsDeduped[0]\n  if (xtsDeduped.length > 1) obj.xt = xtsDeduped\n\n  if (obj.publicKeyBuffer) obj.xs = `urn:btpk:${obj.publicKeyBuffer.toString('hex')}`\n  if (obj.publicKey) obj.xs = `urn:btpk:${obj.publicKey}`\n  if (obj.name) obj.dn = obj.name\n  if (obj.keywords) obj.kt = obj.keywords\n  if (obj.announce) obj.tr = obj.announce\n  if (obj.urlList) {\n    obj.ws = obj.urlList\n    delete obj.as\n  }\n  if (obj.peerAddresses) obj['x.pe'] = obj.peerAddresses\n\n  let result = 'magnet:?'\n  Object.keys(obj)\n    .filter(key => key.length === 2 || key === 'x.pe')\n    .forEach((key, i) => {\n      const values = Array.isArray(obj[key]) ? obj[key] : [obj[key]]\n      values.forEach((val, j) => {\n        if ((i > 0 || j > 0) && ((key !== 'kt' && key !== 'so') || j === 0)) result += '&'\n\n        if (key === 'dn') val = encodeURIComponent(val).replace(/%20/g, '+')\n        if (key === 'tr' || key === 'as' || key === 'ws') {\n          val = encodeURIComponent(val)\n        }\n        // Don't URI encode BEP46 keys\n        if (key === 'xs' && !val.startsWith('urn:btpk:')) {\n          val = encodeURIComponent(val)\n        }\n        if (key === 'kt') val = encodeURIComponent(val)\n        if (key === 'so') return\n\n        if (key === 'kt' && j > 0) result += `+${val}`\n        else result += `${key}=${val}`\n      })\n      if (key === 'so') result += `${key}=${bep53Range.compose(values)}`\n    })\n\n  return result\n}\n"]},"metadata":{},"sourceType":"script"}