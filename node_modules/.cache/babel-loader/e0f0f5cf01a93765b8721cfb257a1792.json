{"ast":null,"code":"import React from'react';import{Button,Form,Header,Icon,Modal,TextArea}from'semantic-ui-react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var SettingsModal=function SettingsModal(_ref){var trigger=_ref.trigger;return/*#__PURE__*/_jsxs(Modal,{trigger:trigger,basic:true,closeIcon:true,size:\"small\",children:[/*#__PURE__*/_jsx(Header,{icon:\"setting\",content:\"Settings\"}),/*#__PURE__*/_jsx(Modal.Content,{children:/*#__PURE__*/_jsx(Form,{children:/*#__PURE__*/_jsx(TextArea,{rows:10,id:\"settings_textarea\",children:window.localStorage.getItem('watchparty-setting')||JSON.stringify(getDefaultSettings(),null,2)})})}),/*#__PURE__*/_jsx(Modal.Actions,{children:/*#__PURE__*/_jsxs(Button,{color:\"green\",inverted:true,onClick:function onClick(){var newSetting=document.getElementById('settings_textarea').value;try{validateSettingsString(newSetting);updateSettings(newSetting);window.location.reload();}catch(e){alert(e);}},children:[/*#__PURE__*/_jsx(Icon,{name:\"checkmark\"}),\"Save\"]})})]});};export function getDefaultSettings(){return{};}export function getCurrentSettings(){var setting=window.localStorage.getItem('watchparty-setting');try{var settings=validateSettingsString(setting);if(!settings){return{};}return settings;}catch(e){console.warn(e);return getDefaultSettings();}}/**\n * Validate a setting string. Return a parsed setting object if valid, otherwise throw exception\n */export function validateSettingsString(setting){// Don't have a setting or invalid value\nvar settingObject=JSON.parse(setting);if(!setting){return{};}if(setting[0]!=='{'){throw new Error('failed to parse settings, using defaults');}return settingObject;}export function updateSettings(newSetting){window.localStorage.setItem('watchparty-setting',newSetting);}","map":{"version":3,"sources":["/home/runner/work/watchparty/watchparty/src/components/Settings/LocalSettings.tsx"],"names":["React","Button","Form","Header","Icon","Modal","TextArea","SettingsModal","trigger","window","localStorage","getItem","JSON","stringify","getDefaultSettings","newSetting","document","getElementById","value","validateSettingsString","updateSettings","location","reload","e","alert","getCurrentSettings","setting","settings","console","warn","settingObject","parse","Error","setItem"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,MAAvB,CAA+BC,IAA/B,CAAqCC,KAArC,CAA4CC,QAA5C,KAA4D,mBAA5D,C,wFAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,UAAGC,CAAAA,OAAH,MAAGA,OAAH,oBAC3B,MAAC,KAAD,EAAO,OAAO,CAAEA,OAAhB,CAAyB,KAAK,KAA9B,CAA+B,SAAS,KAAxC,CAAyC,IAAI,CAAC,OAA9C,wBACE,KAAC,MAAD,EAAQ,IAAI,CAAC,SAAb,CAAuB,OAAO,CAAC,UAA/B,EADF,cAEE,KAAC,KAAD,CAAO,OAAP,wBACE,KAAC,IAAD,wBACE,KAAC,QAAD,EAAU,IAAI,CAAE,EAAhB,CAAoB,EAAE,CAAC,mBAAvB,UACGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,oBAA5B,GACCC,IAAI,CAACC,SAAL,CAAeC,kBAAkB,EAAjC,CAAqC,IAArC,CAA2C,CAA3C,CAFJ,EADF,EADF,EAFF,cAUE,KAAC,KAAD,CAAO,OAAP,wBACE,MAAC,MAAD,EACE,KAAK,CAAC,OADR,CAEE,QAAQ,KAFV,CAGE,OAAO,CAAE,kBAAM,CACb,GAAMC,CAAAA,UAAU,CAAIC,QAAQ,CAACC,cAAT,CAClB,mBADkB,CAAD,CAEQC,KAF3B,CAGA,GAAI,CACFC,sBAAsB,CAACJ,UAAD,CAAtB,CACAK,cAAc,CAACL,UAAD,CAAd,CACAN,MAAM,CAACY,QAAP,CAAgBC,MAAhB,GACD,CAAC,MAAOC,CAAP,CAAU,CACVC,KAAK,CAACD,CAAD,CAAL,CACD,CACF,CAdH,wBAgBE,KAAC,IAAD,EAAM,IAAI,CAAC,WAAX,EAhBF,UADF,EAVF,GAD2B,EAAtB,CAmCP,MAAO,SAAST,CAAAA,kBAAT,EAAwC,CAC7C,MAAO,EAAP,CACD,CAED,MAAO,SAASW,CAAAA,kBAAT,EAAwC,CAC7C,GAAMC,CAAAA,OAAO,CAAGjB,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,oBAA5B,CAAhB,CACA,GAAI,CACF,GAAIgB,CAAAA,QAAQ,CAAGR,sBAAsB,CAACO,OAAD,CAArC,CACA,GAAI,CAACC,QAAL,CAAe,CACb,MAAO,EAAP,CACD,CACD,MAAOA,CAAAA,QAAP,CACD,CAAC,MAAOJ,CAAP,CAAU,CACVK,OAAO,CAACC,IAAR,CAAaN,CAAb,EACA,MAAOT,CAAAA,kBAAkB,EAAzB,CACD,CACF,CAED;AACA;AACA,GACA,MAAO,SAASK,CAAAA,sBAAT,CACLO,OADK,CAEY,CACjB;AACA,GAAII,CAAAA,aAAuB,CAAGlB,IAAI,CAACmB,KAAL,CAAWL,OAAX,CAA9B,CACA,GAAI,CAACA,OAAL,CAAc,CACZ,MAAO,EAAP,CACD,CACD,GAAIA,OAAO,CAAC,CAAD,CAAP,GAAe,GAAnB,CAAwB,CACtB,KAAM,IAAIM,CAAAA,KAAJ,CAAU,0CAAV,CAAN,CACD,CACD,MAAOF,CAAAA,aAAP,CACD,CAED,MAAO,SAASV,CAAAA,cAAT,CAAwBL,UAAxB,CAA4C,CACjDN,MAAM,CAACC,YAAP,CAAoBuB,OAApB,CAA4B,oBAA5B,CAAkDlB,UAAlD,EACD","sourcesContent":["import React from 'react';\nimport { Button, Form, Header, Icon, Modal, TextArea } from 'semantic-ui-react';\n\nexport const SettingsModal = ({ trigger }: any) => (\n  <Modal trigger={trigger} basic closeIcon size=\"small\">\n    <Header icon=\"setting\" content=\"Settings\" />\n    <Modal.Content>\n      <Form>\n        <TextArea rows={10} id=\"settings_textarea\">\n          {window.localStorage.getItem('watchparty-setting') ||\n            JSON.stringify(getDefaultSettings(), null, 2)}\n        </TextArea>\n      </Form>\n    </Modal.Content>\n    <Modal.Actions>\n      <Button\n        color=\"green\"\n        inverted\n        onClick={() => {\n          const newSetting = (document.getElementById(\n            'settings_textarea'\n          ) as HTMLTextAreaElement)!.value;\n          try {\n            validateSettingsString(newSetting);\n            updateSettings(newSetting);\n            window.location.reload();\n          } catch (e) {\n            alert(e);\n          }\n        }}\n      >\n        <Icon name=\"checkmark\" />\n        Save\n      </Button>\n    </Modal.Actions>\n  </Modal>\n);\n\nexport function getDefaultSettings(): Settings {\n  return {};\n}\n\nexport function getCurrentSettings(): Settings {\n  const setting = window.localStorage.getItem('watchparty-setting');\n  try {\n    let settings = validateSettingsString(setting);\n    if (!settings) {\n      return {};\n    }\n    return settings;\n  } catch (e) {\n    console.warn(e);\n    return getDefaultSettings();\n  }\n}\n\n/**\n * Validate a setting string. Return a parsed setting object if valid, otherwise throw exception\n */\nexport function validateSettingsString(\n  setting: string | null\n): Settings | null {\n  // Don't have a setting or invalid value\n  let settingObject: Settings = JSON.parse(setting as any);\n  if (!setting) {\n    return {};\n  }\n  if (setting[0] !== '{') {\n    throw new Error('failed to parse settings, using defaults');\n  }\n  return settingObject;\n}\n\nexport function updateSettings(newSetting: string) {\n  window.localStorage.setItem('watchparty-setting', newSetting);\n}\n"]},"metadata":{},"sourceType":"module"}