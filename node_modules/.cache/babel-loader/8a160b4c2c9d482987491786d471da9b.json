{"ast":null,"code":"/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n'use strict';\n\nvar charTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nvar byteTable = [0xff, 0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff];\n\nfunction quintetCount(buff) {\n  var quintets = Math.floor(buff.length / 5);\n  return buff.length % 5 === 0 ? quintets : quintets + 1;\n}\n\nexports.encode = function (plain) {\n  if (!Buffer.isBuffer(plain)) {\n    plain = new Buffer(plain);\n  }\n\n  var i = 0;\n  var j = 0;\n  var shiftIndex = 0;\n  var digit = 0;\n  var encoded = new Buffer(quintetCount(plain) * 8);\n  /* byte by byte isn't as pretty as quintet by quintet but tests a bit\n      faster. will have to revisit. */\n\n  while (i < plain.length) {\n    var current = plain[i];\n\n    if (shiftIndex > 3) {\n      digit = current & 0xff >> shiftIndex;\n      shiftIndex = (shiftIndex + 5) % 8;\n      digit = digit << shiftIndex | (i + 1 < plain.length ? plain[i + 1] : 0) >> 8 - shiftIndex;\n      i++;\n    } else {\n      digit = current >> 8 - (shiftIndex + 5) & 0x1f;\n      shiftIndex = (shiftIndex + 5) % 8;\n      if (shiftIndex === 0) i++;\n    }\n\n    encoded[j] = charTable.charCodeAt(digit);\n    j++;\n  }\n\n  for (i = j; i < encoded.length; i++) {\n    encoded[i] = 0x3d; //'='.charCodeAt(0)\n  }\n\n  return encoded;\n};\n\nexports.decode = function (encoded) {\n  var shiftIndex = 0;\n  var plainDigit = 0;\n  var plainChar;\n  var plainPos = 0;\n\n  if (!Buffer.isBuffer(encoded)) {\n    encoded = new Buffer(encoded);\n  }\n\n  var decoded = new Buffer(Math.ceil(encoded.length * 5 / 8));\n  /* byte by byte isn't as pretty as octet by octet but tests a bit\n      faster. will have to revisit. */\n\n  for (var i = 0; i < encoded.length; i++) {\n    if (encoded[i] === 0x3d) {\n      //'='\n      break;\n    }\n\n    var encodedByte = encoded[i] - 0x30;\n\n    if (encodedByte < byteTable.length) {\n      plainDigit = byteTable[encodedByte];\n\n      if (shiftIndex <= 3) {\n        shiftIndex = (shiftIndex + 5) % 8;\n\n        if (shiftIndex === 0) {\n          plainChar |= plainDigit;\n          decoded[plainPos] = plainChar;\n          plainPos++;\n          plainChar = 0;\n        } else {\n          plainChar |= 0xff & plainDigit << 8 - shiftIndex;\n        }\n      } else {\n        shiftIndex = (shiftIndex + 5) % 8;\n        plainChar |= 0xff & plainDigit >>> shiftIndex;\n        decoded[plainPos] = plainChar;\n        plainPos++;\n        plainChar = 0xff & plainDigit << 8 - shiftIndex;\n      }\n    } else {\n      throw new Error('Invalid input - it is not base32 encoded string');\n    }\n  }\n\n  return decoded.slice(0, plainPos);\n};","map":{"version":3,"sources":["/home/runner/work/watchparty/watchparty/node_modules/thirty-two/lib/thirty-two/thirty-two.js"],"names":["charTable","byteTable","quintetCount","buff","quintets","Math","floor","length","exports","encode","plain","Buffer","isBuffer","i","j","shiftIndex","digit","encoded","current","charCodeAt","decode","plainDigit","plainChar","plainPos","decoded","ceil","encodedByte","Error","slice"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n'use strict';\n\nvar charTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nvar byteTable = [\n    0xff, 0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,\n    0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,\n    0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,\n    0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff,\n    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,\n    0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,\n    0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,\n    0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff\n];\n\nfunction quintetCount(buff) {\n    var quintets = Math.floor(buff.length / 5);\n    return buff.length % 5 === 0 ? quintets: quintets + 1;\n}\n\nexports.encode = function(plain) {\n    if(!Buffer.isBuffer(plain)){\n    \tplain = new Buffer(plain);\n    }\n    var i = 0;\n    var j = 0;\n    var shiftIndex = 0;\n    var digit = 0;\n    var encoded = new Buffer(quintetCount(plain) * 8);\n\n    /* byte by byte isn't as pretty as quintet by quintet but tests a bit\n        faster. will have to revisit. */\n    while(i < plain.length) {\n        var current = plain[i];\n\n        if(shiftIndex > 3) {\n            digit = current & (0xff >> shiftIndex);\n            shiftIndex = (shiftIndex + 5) % 8;\n            digit = (digit << shiftIndex) | ((i + 1 < plain.length) ?\n                plain[i + 1] : 0) >> (8 - shiftIndex);\n            i++;\n        } else {\n            digit = (current >> (8 - (shiftIndex + 5))) & 0x1f;\n            shiftIndex = (shiftIndex + 5) % 8;\n            if(shiftIndex === 0) i++;\n        }\n\n        encoded[j] = charTable.charCodeAt(digit);\n        j++;\n    }\n\n    for(i = j; i < encoded.length; i++) {\n        encoded[i] = 0x3d; //'='.charCodeAt(0)\n    }\n\n    return encoded;\n};\n\nexports.decode = function(encoded) {\n    var shiftIndex = 0;\n    var plainDigit = 0;\n    var plainChar;\n    var plainPos = 0;\n    if(!Buffer.isBuffer(encoded)){\n    \tencoded = new Buffer(encoded);\n    }\n    var decoded = new Buffer(Math.ceil(encoded.length * 5 / 8));\n\n    /* byte by byte isn't as pretty as octet by octet but tests a bit\n        faster. will have to revisit. */\n    for(var i = 0; i < encoded.length; i++) {\n    \tif(encoded[i] === 0x3d){ //'='\n    \t\tbreak;\n    \t}\n\n        var encodedByte = encoded[i] - 0x30;\n\n        if(encodedByte < byteTable.length) {\n            plainDigit = byteTable[encodedByte];\n\n            if(shiftIndex <= 3) {\n                shiftIndex = (shiftIndex + 5) % 8;\n\n                if(shiftIndex === 0) {\n                    plainChar |= plainDigit;\n                    decoded[plainPos] = plainChar;\n                    plainPos++;\n                    plainChar = 0;\n                } else {\n                    plainChar |= 0xff & (plainDigit << (8 - shiftIndex));\n                }\n            } else {\n                shiftIndex = (shiftIndex + 5) % 8;\n                plainChar |= 0xff & (plainDigit >>> shiftIndex);\n                decoded[plainPos] = plainChar;\n                plainPos++;\n\n                plainChar = 0xff & (plainDigit << (8 - shiftIndex));\n            }\n        } else {\n        \tthrow new Error('Invalid input - it is not base32 encoded string');\n        }\n    }\n\n    return decoded.slice(0, plainPos);\n};\n"]},"metadata":{},"sourceType":"script"}